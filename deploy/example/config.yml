############################## 基础配置 ##############################
# 部署名字 和 deploy/dir_name 保持一致, 用于生成证书拼接路径，和存储自定义 仓库 证书
# 主要用于多集群管理
deploy_name: "example"

############################# 几个关键目录
#  二进制 安装路径
base_dir: "/opt/kube"
# k8s 证书存储路径(不推荐修改，和官方保持一致)
kube_base_dir: "/etc/kubernetes"

# kubelet 数据目录
kubelet_base_dir: "/var/lib/kubelet"

# 容器数据路径
container_data_root: "/var/lib/containerd"
############################ 其他通用配置
# 仓库域名
registry: registry.ikubeops.local:5000
# 仓库地址
registry_ip: ""
# 仓库二级目录，存放 kubernetes 镜像，kube-vip 镜像
registry_project: "ikubeops"
#  k8s 版本
kubernetes_version: "v1.32.3"
# 集群插件部署模式  yaml | helm
addon_deploy_pattern: "yaml"
# 控制组件部署模式  manifest | systemd
control_deploy_pattern: "manifest"

# 是否部署 kube-vip  设置为 false 指定外部负载均衡器，推荐使用 kube-vip
enable_kube_vip: true
# k8s apiserver 负载均衡地址 如果自定义外部负载均衡器 请代理好 master kube-apiserver 地址
kube_apiserver_lb_addr: "172.16.1.200"
# 负载均衡器端口
# 同时也是 kube-apiserver 的端口 保证一致性
kube_apiserver_lb_port: "6443"
# k8s service cidr
service_cidr: "10.96.0.0/12"
#  pod cidr
pod_cidr: "10.244.0.0/16"
# pod 最大数量
max_pods: 110
# service nodeport range
service_nodeport_range: "30000-32767"
# 集群 DNS 缓存 推荐开启
enable_local_dns_cache: true
# 集群 DNS 域名 不推荐修改
cluster_dns_domain: "cluster.local"
# 集群部署的 dns 组件，目前支持 coredns
cluster_dns: "coredns" #
# 集群使用的 cni 网络组件 目前支持 calico, cilium
cluster_cni: "calico" # 每个组件的具体配置 看下面
# 网络组件部署的名称空间
cluster_cni_namespace: "calico-system"
##############################  证书相关  ##############################
#   - "none": 不更新任何证书（默认值）
#   - "ca_only": 只更新 CA 证书，不更新组件证书
#   - "components_only": 只更新组件证书，不更新 CA 证书
#   - "all": 更新所有证书，包括 CA 和所有组件证书
# 如果设置 更新证书模式，不要执行 00 部署，执行 04.cert-manager.yml, 05, 06, 08 之后重启服务器，或者重启网络组件加载证书配置。
# 也可以手动备份所有证书，然后执行 04.cert-manager.yml, 05, 06, 08, 没有证书自然就新增证书了
cert_update_mode: "none"
# 证书有效期设置 (CA 证书固定为 100 年 = 876000h)
ca_expiry: "876000h" # 100 年
cert_expiry: "438000h" # 50 年
custom_expiry: "438000h"
master_cert_hosts:
- "bin-ikubeops.ikubeops.local" # 额外认证域名或者IP地址

############################## 容器相关 ##############################
# 容器运行时支持 containerd 或 docker
# container_runtime: docker
container_runtime: containerd
container_version: 2.0.4
# 容器运行时版本
# container_version: 28.0.4
# 沙箱镜像版本
sandbox_image_tag: "3.10"
# 代理相关 没有则留空
http_proxy: "http://10.8.8.6:7890"
https_proxy: "http://10.8.8.6:7890"
no_proxy: "localhost,127.0.0.0/8,10.244.0.0/26,easzlab.io.local,harbor.ikubeops.local,*.ikubeops.local,172.16.0.0/16,10.150.0.0/16,10.160.0.0/16,192.168.0.0/16,10.96.0.0/12,10.245.0.0/16,registry.aliyuncs.com"
# 自定义白名单仓库
# 如果 cert_auth 为true 需要把 镜像仓库的 ca.crt 证书 放到 {{deploy_name}}/registry/仓库/ca.crt
# 例如: example/registry/harbor.ikubeops.local/ca.crt
# 如果没有证书只需要添加白名单设置 cert_auth 为 false 即可
container_insecure_registries:
- hosts: "https://harbor.ikubeops.local"
  cert_auth: true
- hosts: "http://registry1.example.com:5000"
  cert_auth: true
- hosts: "https://registry2.example.com:5000"
- hosts: "http://registry3.example.com:5000"
  cert_auth: false

############################## chrony 配置 ##############################
# 时间同步上游服务器地址
chrony_ntp_servers:
- server: "ntp1.aliyun.com"
  options: "iburst"
- server: "time1.cloud.tencent.com"
  options: "iburst"
- server: "0.cn.pool.ntp.org"
  options: "iburst"

############################## kube_vip 配置 ##############################
# 部署模式 arp | bgp (bgp 模式需要提供参数可以详看/role/kube_vip/defaults/main.yml)
kube_vip_deploy_mode: arp # ARP 模式使用的网络接口 
kube_vip_interface: "eth2"
kube_vip_version: "v0.8.9"

##############################  etcd 相关 ##############################
# 控制是否使用外部etcd (true: 使用外部etcd, false: 使用内部etcd)
use_external_etcd: false
# 外部etcd集群地址 (仅当use_external_etcd为true时使用) !!! 注意需要按照规范请自动添加证书到master 节点，后期会优化
# 证书路径如下
# {{kube_base_dir}}/pki/etcd/ca.pem
# {{kube_base_dir}}pki/etcd/apiserver-etcd-client.pem
# {{kube_base_dir}}pki/etcd/apiserver-etcd-client-key.pem
external_etcd_endpoints: "https://etcd-1.example.com:2379,https://etcd-2.example.com:2379,https://etcd-3.example.com:2379"
# etcd 部署模式 支持 manifest 和 systemd(二进制) 两种模式 推荐: manifest
etcd_deploy_mode: "manifest"
# etcd 镜像版本 "{{ registry }}/{{ registry_project }}/etcd:{{ etcd_version }}"
etcd_version: "3.5.16-0"
# etcd 数据目录
etcd_data_dir: "/var/lib/etcd"

##############################  calico 相关 ##############################
# calico 二级镜像目录
calico_registry_project: "calico"
# calico 版本
calico_version: "v3.29.3"
# 通信网卡 如果为空则自动选择
calico_interface: ""
# calico 模式，支持 bgp | ipip | vxlan 三种模式 
# ipip/vxlan 自动开启 host gw。
# bgp 自动开启 rr 
calico_mode: "bgp"
# bgp 模式是否开启 rr 模式
# 如果 自定义 rr 主机 则 在 hosts 文件 calico_rr_group 中添加集群节点ip即可
calico_bgp_rr: true

##############################  其他 addons ##############################
# 是否部署 metrics-server
metrics_server_enabled: true
# metrecs-server 镜像二级目录
metrics_server_registry_project: "ikubeops"

# 是否部署 nfs-provisioner
nfs_enabled: true
# 是否部署 nfs-snapshot-controller
nfs_snapshot_controller_enabled: true
# nfs 二级镜像目录
nfs_registry_project: "nfs-storage"
nfs_namespace: "nfs-system"
# 默认 nfs storeage class 服务器地址
nfs_server: "172.16.1.111"
# 默认 nfs storeage class 服务器共享目录
nfs_share_path: "/data/bin-k8s"
# 默认 nfs storeage class 名称
nfs_storeage_class_name: "nfs-csi-default"
# 默认 nfs storeage class 删除策略
nfs_storeage_reclaim_policy: "Retain" # Delete Retain archive
# 默认 nfs storeage class 挂在选项
nfs_storeage_mount_options: "fsvers=4.1,hard"

# 是否部署 metallb 
metallb_enabled: true
# metallb 二级镜像目录
metallb_registry_project: "metallb"
# metellb namespace
metallb_namespace: "metallb-system"
# metallb 地址池
metallb_address_pool:
- 172.16.1.40-172.16.1.45
- 172.16.1.55/32

# 是否部署 ingress-nginx
nginx_ingress_enabled: true
# ingress-nginx 二级镜像目录
nginx_registry_project: "ingress-nginx"
# ingress-nginx namespace
nginx_ingress_namespace: "ingress-nginx"
# ingress-nginx service type
nginx_ingress_service_type: "LoadBalancer" #  ClusterIp(hostNetwork) NodePort LoadBalancer
