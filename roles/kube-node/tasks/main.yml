---
# 前置检查
- import_tasks: preflight.yml

# 创建远程节点上的必要目录
- name: 创建必要的目录结构
  file:
    path: "{{ item }}"
    state: directory
    mode: 755
  with_items:
  - "{{ kubelet_base_dir }}"
  - "/var/lib/kube-proxy"
  - "/etc/cni/net.d"
  - "{{ base_dir }}/cni/bin"
  - "{{ base_dir }}/bin"
  - "{{ kube_base_dir }}/pki"
  - "{{ ca_dir }}"
  - "{{ kube_base_dir }}/manifests"

# 复制 kubernetes 二进制文件到远程节点
- name: 复制 kubernetes 二进制文件到节点
  copy:
    src: "{{ kubernetes_bin_dir }}/{{ item }}"
    dest: "{{ base_dir }}/bin"
    mode: 755
  with_items:
  - kubectl
  - kubelet
  tags: upgrade_k8s

# 检查 /run/systemd/resolve/resolv.conf 是否存在
- name: 检查文件 /run/systemd/resolve/resolv.conf 是否存在
  stat:
    path: "/run/systemd/resolve/resolv.conf"
  register: resolv_file
  tags: dns_config, upgrade_k8s

# 如果文件不存在，安装并配置 systemd-resolved
- name: 配置 systemd-resolved
  block:
  # 安装 systemd-resolved 服务
  - name: 安装 systemd-resolved 包
    package:
      name: systemd-resolved
      state: present
    register: install_result

  # 备份原始 resolv.conf 文件（如果存在）
  - name: 备份原始 resolv.conf 文件
    copy:
      src: /etc/resolv.conf
      dest: /etc/resolv.conf.backup
      remote_src: yes
      force: no # 仅在备份不存在时创建

  # 启用并启动 systemd-resolved 服务
  - name: 启用并启动 systemd-resolved 服务
    systemd:
      name: systemd-resolved
      state: started
      enabled: yes
      daemon_reload: yes
  - name: 将 /etc/resolv.conf 链接到 systemd-resolved 管理的文件
    file:
      src: /run/systemd/resolve/resolv.conf
      dest: /etc/resolv.conf
      state: link
      force: yes

  when: not resolv_file.stat.exists
  tags: dns_config, upgrade_k8s

- name: 添加二进制目录到系统环境变量
  lineinfile:
    path: /etc/profile.d/999-ikubesop-k8s.sh
    regexp: '^export PATH={{ base_dir }}/bin:\$PATH'
    line: 'export PATH={{ base_dir }}/bin:$PATH'
    create: yes
    mode: 644
  tags: kubernetes_env

# 添加 kubectl 自动补全
- name: 添加 kubectl 自动补全
  lineinfile:
    dest: ~/.bashrc
    state: present
    regexp: 'kubectl completion'
    line: 'source <(kubectl completion bash) # generated by kubeops'

# 复制 CA 证书
- name: 分发 CA 证书
  copy:
    src: "{{ local_pki_dir }}/ca.pem"
    dest: "{{ ca_dir }}/ca.pem"
    mode: 644

- name: 分发 CA 密钥
  copy:
    src: "{{ local_pki_dir }}/ca-key.pem"
    dest: "{{ ca_dir }}/ca-key.pem"
    mode: 644
  when: "'ikube_master' in group_names"

- name: 分发 admin kubeconfig
  copy:
    src: "{{ local_pki_dir }}/../kubeconfig/admin.kubeconfig"
    dest: "{{ kube_base_dir }}/admin.kubeconfig"
    mode: 644
  when: "'ikube_master' in group_names"

# 复制 kubelet 证书
- name: 分发 kubelet 证书
  copy:
    src: "{{ local_pki_dir }}/kubelet/{{ ansible_nodename }}.pem"
    dest: "{{ ca_dir }}/kubelet.pem"
    mode: 644
  notify: "重启 kubelet 服务"

- name: 分发 kubelet 私钥
  copy:
    src: "{{ local_pki_dir }}/kubelet/{{ ansible_nodename }}-key.pem"
    dest: "{{ ca_dir }}/kubelet-key.pem"
    mode: 644
  notify: "重启 kubelet 服务"

# 复制 kubeconfig
- name: 分发 kubelet kubeconfig
  copy:
    src: "{{ local_kubeconfig_dir }}/kubelet/{{ ansible_nodename }}.kubeconfig"
    dest: "{{ kube_base_dir }}/kubelet.kubeconfig"
    mode: 644
  notify: "重启 kubelet 服务"

# 生成 kubelet 配置
- name: 分发 kubelet 配置文件
  template:
    src: kubelet-config.yaml.j2
    dest: "{{ kubelet_base_dir }}/config.yaml"
    mode: 644
  notify: "重启 kubelet 服务"
  tags: upgrade_k8s, restart_node

# 创建 kubelet 服务文件
- name: 创建 kubelet 服务文件
  template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
    mode: 644
  notify: "重启 kubelet 服务"
  tags: upgrade_k8s, restart_node

# 启用 kubelet 服务
- name: 开机启用 kubelet 服务
  systemd:
    name: kubelet
    enabled: yes
    state: started
    daemon_reload: yes

# 轮询检查 kubelet 服务状态
- name: 轮询等待 kubelet 启动
  shell: "systemctl is-active kubelet.service"
  register: kubelet_status
  until: '"active" in kubelet_status.stdout'
  retries: 5
  delay: 5
