---
- name: 确保 metallb 目录存在
  file:
    path: "{{ kube_base_dir }}/addon/metallb"
    state: directory
    mode: '0755'
  when: "'ikube_master' in group_names"

- name: 复制 metallb 模板到 master
  template:
    src: "{{ item.src }}"
    dest: "{{ kube_base_dir }}/addon/metallb/{{ item.dest }}"
    mode: '0644'
  loop:
  - { src: "{{ metallb_template_manifests_dir }}/metallb-frr.yaml.j2", dest: "metallb-frr.yaml" }
  - { src: "{{ metallb_template_manifests_dir }}/metallb-ipaddresspool.yaml.j2", dest: "metallb-ipaddresspool.yaml" }
  - { src: "{{ metallb_template_manifests_dir }}/metallb-l2dvertisement.yaml.j2", dest: "metallb-l2dvertisement.yaml" }
  - { src: "{{ metallb_template_manifests_dir }}/metallb-native.yaml.j2", dest: "metallb-native.yaml" }
  when: "'ikube_master' in group_names"

- name: 部署 metallb 插件
  shell: |
    cd {{ kube_base_dir }}/addon/metallb/
    {{ base_dir }}/bin/kubectl apply -f metallb-native.yaml
    {{ base_dir }}/bin/kubectl apply -f metallb-frr.yaml
  delegate_to: "{{ groups['ikube_master'][0] }}"
  register: apply_result
  failed_when: apply_result.stderr is defined and apply_result.stderr != ""
  run_once: true

- name: 轮训等待所有 metallb controller 进入运行状态
  shell: >
    PODCOUNT=$({{ base_dir }}/bin/kubectl get pods -n {{ metallb_namespace }} -l component=controller --no-headers | wc -l) && test "$PODCOUNT" -gt 0 && test $({{ base_dir }}/bin/kubectl get pods -n {{ metallb_namespace }} -l component=controller -o jsonpath='{range .items[*]}{.status.phase}{","}{.status.containerStatuses[*].ready}{"\n"}{end}' | grep -v "Running,true" | wc -l) -eq 0
  register: metallb_pods_not_running
  retries: 20
  delay: 10
  until: metallb_pods_not_running.rc == 0
  delegate_to: "{{ groups['ikube_master'][0] }}"
  run_once: true

- name: 轮训等待所有 metallb speaker 进入运行状态
  shell: >
    PODCOUNT=$({{ base_dir }}/bin/kubectl get pods -n {{ metallb_namespace }} -l component=speaker --no-headers | wc -l) && test "$PODCOUNT" -gt 0 && test $({{ base_dir }}/bin/kubectl get pods -n {{ metallb_namespace }} -l component=speaker -o jsonpath='{range .items[*]}{.status.phase}{","}{.status.containerStatuses[*].ready}{"\n"}{end}' | grep -v "Running,true" | wc -l) -eq 0
  register: metallb_speaker_pods_not_running
  retries: 20
  delay: 10
  until: metallb_speaker_pods_not_running.rc == 0
  delegate_to: "{{ groups['ikube_master'][0] }}"
  run_once: true

- name: 部署 metallb ip pool
  shell: |
    cd {{ kube_base_dir }}/addon/metallb/
    {{ base_dir }}/bin/kubectl apply -f metallb-ipaddresspool.yaml
    {{ base_dir }}/bin/kubectl apply -f metallb-l2dvertisement.yaml
  delegate_to: "{{ groups['ikube_master'][0] }}"
  register: apply_result
  failed_when: apply_result.stderr is defined and apply_result.stderr != ""
  run_once: true

- name: 查询 metallb controller pod 状态
  shell: >
    {{ base_dir }}/bin/kubectl get pods -n {{ metallb_namespace }} -l  component=controller 
  register: metallb_controller_pods_status
  run_once: true
  changed_when: false
  delegate_to: "{{ groups['ikube_master'][0] }}"

- name: 输出 metallb controller pod 状态
  debug:
    var: metallb_controller_pods_status.stdout_lines
  changed_when: false
  delegate_to: "{{ groups['ikube_master'][0] }}"
  run_once: true

- name: 查询 metallb speaker pod 状态
  shell: >
    {{ base_dir }}/bin/kubectl get pods -n {{ metallb_namespace }} -l  component=speaker 
  register: metallb_speaker_pods_status
  run_once: true
  changed_when: false
  delegate_to: "{{ groups['ikube_master'][0] }}"

- name: 输出 metallb speaker pod 状态
  debug:
    var: metallb_speaker_pods_status.stdout_lines
  changed_when: false
  delegate_to: "{{ groups['ikube_master'][0] }}"
  run_once: true
