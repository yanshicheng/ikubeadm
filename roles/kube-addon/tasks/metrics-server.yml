---
- name: 确保 metrics-server 目录存在
  file:
    path: "{{ kube_base_dir }}/addon/metrics-server"
    state: directory
    mode: '0755'
  when: "'ikube_master' in group_names"

- name: 复制 metrics-server 模板到 master
  template:
    src: "{{ item.src }}"
    dest: "{{ kube_base_dir }}/addon/metrics-server/{{ item.dest }}"
    mode: '0644'
  loop:
  - { src: "{{ metrics_server_template_manifests_dir }}/metrics-server.yaml.j2", dest: "metrics-server.yaml" }
  when: "'ikube_master' in group_names"

- name: 检查命名空间是否存在
  shell: "{{ base_dir }}/bin/kubectl get namespace {{ metrics_server_namespace }} --no-headers --ignore-not-found"
  register: namespace_exists
  delegate_to: "{{ groups['ikube_master'][0] }}"
  run_once: true
  changed_when: false

- name: 创建命名空间
  shell: "{{ base_dir }}/bin/kubectl create namespace {{ metrics_server_namespace }}"
  when: namespace_exists.stdout == ""
  delegate_to: "{{ groups['ikube_master'][0] }}"
  run_once: true

- name: 部署 metrics-server 插件
  shell: |
    cd {{ kube_base_dir }}/addon/metrics-server/
    {{ base_dir }}/bin/kubectl apply -f metrics-server.yaml
  delegate_to: "{{ groups['ikube_master'][0] }}"
  register: apply_result
  failed_when: apply_result.stderr is defined and apply_result.stderr != ""
  run_once: true

- name: 轮训等待所有 metrics-server pod 进入运行状态
  shell: >
    PODCOUNT=$({{ base_dir }}/bin/kubectl get pods -n {{ metrics_server_namespace }} -l k8s-app=metrics-server --no-headers | wc -l) && test "$PODCOUNT" -gt 0 && test $({{ base_dir }}/bin/kubectl get pods -n {{ metrics_server_namespace }} -l k8s-app=metrics-server -o jsonpath='{range .items[*]}{.status.phase}{","}{.status.containerStatuses[*].ready}{"\n"}{end}' | grep -v "Running,true" | wc -l) -eq 0
  register: metrics_server_pods_not_running
  retries: 20
  delay: 10
  until: metrics_server_pods_not_running.rc == 0
  delegate_to: "{{ groups['ikube_master'][0] }}"
  run_once: true

- name: 查询 metrics-server pod 状态
  shell: >
    {{ base_dir }}/bin/kubectl get pods -n {{ metrics_server_namespace }} -l  k8s-app=metrics-server 
  register: metrics_server_pods_status
  run_once: true
  changed_when: false
  delegate_to: "{{ groups['ikube_master'][0] }}"

- name: 输出 metrics-server speaker pod 状态
  debug:
    var: metrics_server_pods_status.stdout_lines
  changed_when: false
  delegate_to: "{{ groups['ikube_master'][0] }}"
  run_once: true
